import { Opcode } from './Opcode'
import { opSTOP } from './control'
import {
  opADD,
  opMUL,
  opSUB,
  opDIV,
  opSDIV,
  opMOD,
  opSMOD,
  opADDMOD,
  opMULMOD,
  opEXP,
  opSIGNEXTEND,
  opLT,
  opGT,
  opSLT,
  opSGT,
  opEQ,
  opISZERO,
  opAND,
  opOR,
  opXOR,
  opNOT,
  opBYTE,
  opSHL,
  opSHR,
  opSAR,
} from './calculations'
import { invalidOpcode } from './invalid'
import { opDup, opSwap } from './stack'

export { opUnreachable } from './invalid'
export { opPush } from './stack'

const OP_CODES: Record<string, Opcode | undefined> = {
  '00': opSTOP,
  '01': opADD,
  '02': opMUL,
  '03': opSUB,
  '04': opDIV,
  '05': opSDIV,
  '06': opMOD,
  '07': opSMOD,
  '08': opADDMOD,
  '09': opMULMOD,
  '0a': opEXP,
  '0b': opSIGNEXTEND,
  10: opLT,
  11: opGT,
  12: opSLT,
  13: opSGT,
  14: opEQ,
  15: opISZERO,
  16: opAND,
  17: opOR,
  18: opXOR,
  19: opNOT,
  '1a': opBYTE,
  '1b': opSHL,
  '1c': opSHR,
  '1d': opSAR,
  // 60 - 7f PUSH - handled differently
  80: opDup(1),
  81: opDup(1),
  82: opDup(2),
  83: opDup(3),
  84: opDup(4),
  85: opDup(5),
  86: opDup(6),
  87: opDup(7),
  88: opDup(8),
  89: opDup(9),
  '8a': opDup(10),
  '8b': opDup(11),
  '8c': opDup(12),
  '8d': opDup(13),
  '8e': opDup(14),
  '8f': opDup(15),
  90: opSwap(1),
  91: opSwap(1),
  92: opSwap(2),
  93: opSwap(3),
  94: opSwap(4),
  95: opSwap(5),
  96: opSwap(6),
  97: opSwap(7),
  98: opSwap(8),
  99: opSwap(9),
  '9a': opSwap(10),
  '9b': opSwap(11),
  '9c': opSwap(12),
  '9d': opSwap(13),
  '9e': opSwap(14),
  '9f': opSwap(15),
}

export function getOpcode (hex: string) {
  return OP_CODES[hex] ?? invalidOpcode(hex)
}
